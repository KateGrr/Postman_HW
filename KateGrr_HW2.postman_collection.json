{
	"info": {
		"_postman_id": "32adbbdd-e71b-4973-94d2-115b0d9f87ed",
		"name": "KateGrr_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var responseJson = pm.response.json();",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Your test name = Kate\", function () {",
							"    pm.expect(responseJson.name).to.eql(\"Kate\");",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Your test age = 35\", function () {",
							"    pm.expect(responseJson.age).to.eql(\"35\");",
							"})",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Your test salary = 1000\", function () {",
							"    pm.expect(responseJson.salary).to.eql(1000);",
							"})",
							"//7. Спарсить request.",
							"var req = request.data;",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name = request's name\", function () {",
							"    pm.expect(responseJson.name).to.eql(req.name);",
							"});",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Your test age = reqest's age\", function () {",
							"    pm.expect(responseJson.age).to.eql(req.age);",
							"})",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Your test salary = reqest's salary\", function () {",
							"    pm.expect(responseJson.salary).to.eql(+req.salary);",
							"})",
							"//11. Вывести в консоль параметр family из response.",
							"console.log(responseJson.family);",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Your test salary = reqest's salary\", function () {",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(req.salary*4);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var resp = pm.response.json();",
							"//4. Спарсить request.",
							"var req = pm.request.url.query.toObject();",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name = reqest's name\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age = reqest's age\", function () {",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request).",
							"pm.test(\"Check name = reqest's name\", function () {",
							"    pm.expect(resp.salary).to.eql(+req.salary);",
							"});",
							"//8. Вывести в консоль параметр family из response.",
							"console.log(resp.family);",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check dog name\", () => {",
							"  pm.expect(resp.family.pets.dog).to.have.property(\"name\");",
							"});",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check dog age\", () => {",
							"  pm.expect(resp.family.pets.dog).to.have.property(\"age\");",
							"});",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check dog name = Luky\", () => {",
							"  pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check dog age = 4\", () => {",
							"  pm.expect(resp.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "20",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Mike&age=40&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mike"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var resp = pm.response.json(); ",
							"//4. Спарсить request.",
							"var req = pm.request.url.query.toObject();",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name = reqest's name\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check age = reqest's age\", function () {",
							"    pm.expect(resp.age).to.eql(+req.age);",
							"});",
							"//7. Вывести в консоль параметр salary из request.",
							"console.log(req.salary);",
							"//8. Вывести в консоль параметр salary из response.",
							"console.log(resp.salary);",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(+resp.salary[0]);",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(+resp.salary[1]);",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(+resp.salary[2]);",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check salary[0] = req.salary\", function () {",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);",
							"});",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check salary[1] = req.salary*2\", function () {",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);",
							"});",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check salary[2] = req.salary*3\", function () {",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);",
							"});",
							"//15. Создать в окружении переменную name",
							"//16. Создать в окружении переменную age",
							"//17. Создать в окружении переменную salary",
							"//18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req.name);",
							"//19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req.age);",
							"//20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", req.salary);",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"console.log(\"Salary elements:\");",
							"for (i=0; i<3; i++) {",
							"    console.log(+resp.salary[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Masha&age=42&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							"//2. Вставить параметр age из окружения в age",
							"//3. Вставить параметр name из окружения в name",
							"//4. Отправить запрос.",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//6. Спарсить response body в json.",
							"var resp = pm.response.json();",
							"//7. Спарсить request.",
							"var req = request.data;",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check start_qa_salary\", () => {",
							"  pm.expect(resp).to.have.property(\"start_qa_salary\");",
							"});",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Check qa_salary_after_6_months\", () => {",
							"  pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"qa_salary_after_12_months\", () => {",
							"  pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Check qa_salary_after_1.5_year\", () => {",
							"  pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Check qa_salary_after_3.5_years\", () => {",
							"  pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Check person\", () => {",
							"  pm.expect(resp).to.have.property(\"person\");",
							"});",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check start_qa_salary = salary\", () => {",
							"  pm.expect(resp.start_qa_salary).to.eql(+req.salary);",
							"});",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_6_months = salary*2\", () => {",
							"  pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);",
							"});",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7\", () => {",
							"  pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);",
							"});",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3\", () => {",
							"  pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);",
							"});",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_3.5_year = salary*3.8\", () => {",
							"  pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);",
							"});",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check person.u_name[1] = salary\", () => {",
							"  pm.expect(resp.person.u_name[1]).to.eql(+req.salary);",
							"});",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check person.u_age = age\", () => {",
							"  pm.expect(resp.person.u_age).to.eql(+req.age);",
							"});",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Check u_salary_5_years = salary*4.2\", () => {",
							"  pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);",
							"});",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"console.log(\"Person elements:\");",
							"for (key in resp.person) {",
							"    if (key == \"u_name\") {",
							"        console.log(key + \":\");",
							"        for (i=0; i<3; i++) {",
							"            console.log(resp.person.u_name[i]);",
							"        }",
							"    }",
							"    else {",
							"        console.log(key + \" : \" + resp.person[key]);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}